require InlineDrawing;

object NBoneIKSolver : KrakenSolver {
};


// Return Arguments for Kraken
function KrakenSolverArg[] NBoneIKSolver.getArguments(){
  KrakenSolverArg args[] = this.parent.getArguments();
  args.push(KrakenSolverArg('ikblend', 'in', 'Scalar'));
  args.push(KrakenSolverArg('ikgoal', 'in', 'Mat44'));
  args.push(KrakenSolverArg('fkcontrols', 'in', 'Mat44[]'));
  args.push(KrakenSolverArg('tipBoneLen', 'in', 'Scalar'));
  args.push(KrakenSolverArg('pose', 'out', 'Mat44[]'));
  args.push(KrakenSolverArg('legEnd', 'out', 'Mat44'));
  return args;
}


require Math;
require Animation;

function Scalar sq(Scalar v) {
  return v * v;
}

function Xfo[] solveNCFIK(
  in Xfo basePose[],
  in Vec3 goalPosition
) {

  Scalar boneLengths[];
  Vec3 boneVectors[];
  Xfo ikpose[];
  Scalar remainingChainLength = 0;
  boneLengths.resize(basePose.size());
  boneVectors.resize(basePose.size());
  ikpose.resize(basePose.size());
  for (Integer i = 0; i < basePose.size()-1; i++) {
    ikpose[i] = basePose[i];
    // Note: Scaling of bones is currently not supported. 
    boneVectors[i] = basePose[i].inverse().transformVector(basePose[i+1].tr);
    boneLengths[i] = boneVectors[i].length();
    remainingChainLength += abs(boneLengths[i] /* basePose[i].sc.x*/);
  }
  Integer lastBoneIndex = basePose.size-1;
  Vec3 fkChainTip = basePose[lastBoneIndex].tr;
  Vec3 chainRootPos = basePose[0].tr;

  // Apply the soft limit to the distance to the IK goal
  Vec3 vecToIkGoal = goalPosition - chainRootPos;
  Scalar distToIkGoal = vecToIkGoal.length();
  Quat chainOffsetRotation;

  for (Integer i = 0; i < basePose.size()-1; i++) {
    Vec3 vecToFkChainTip;
    Xfo boneXfo;
    Integer boneIndex = i;
    boneXfo = basePose[i];
    if (i == 0) {
      vecToFkChainTip = fkChainTip - boneXfo.tr;
    }
    else {
      // Transform the bone position by the overall chain offset.
      vecToFkChainTip = fkChainTip - (chainRootPos + (chainOffsetRotation.rotateVector((boneXfo.tr - chainRootPos))));

      // Calculate a new pose position based on the parent bones new orientation
      boneXfo.tr = ikpose[i-1].transformVector(boneVectors[i-1]);
    }
    Scalar distToFkChainTip = vecToFkChainTip.length();
    vecToFkChainTip *= 1.0 / distToFkChainTip;

    vecToIkGoal = goalPosition - boneXfo.tr;
    distToIkGoal = vecToIkGoal.length();
    vecToIkGoal *= 1.0 / distToIkGoal; // normalize the vector
    Scalar boneLength = abs(boneLengths[i] /* boneXfo.sc.x*/);

    if (i == 0) {
      // For the first bone calculate and store the overall chain offset towards the ik target
      chainOffsetRotation.setFrom2Vectors(vecToFkChainTip, vecToIkGoal);
    
      fkChainTip = boneXfo.tr + (vecToIkGoal * distToFkChainTip);
      boneXfo.ori = chainOffsetRotation * boneXfo.ori;
    }
    else {
      // Apply the chain offset, and apply any incremental correction.
      // This additional correction is required due to a new bone position based on the new parent orientation
      Quat boneOffsetRotation;
      boneOffsetRotation.setFrom2Vectors(vecToFkChainTip, vecToIkGoal);
      boneXfo.ori = boneOffsetRotation * chainOffsetRotation * boneXfo.ori;
    }

    // Based on the bone index, select an appropriate method to solve
    if (i <= (basePose.size() - 3)) {
      // Remove the current bones length from the chain.
      remainingChainLength -= boneLength;
      Vec3 boneLengthVector;
      //if(boneLengths[i] < 0.0 /* || boneXfo.sc.x < 0.0*/)
      //  boneLengthVector = boneXfo.ori.rotateVector(Vec3(-1.0, 0.0, 0.0));
      //else
        boneLengthVector = boneXfo.ori.rotateVector(boneVectors[i].unit());
      
      // this is the current angle of the bone.
      Scalar fkBoneAngle = acos(Math_clamp(boneLengthVector.dot(vecToIkGoal), -1.0, 1.0));

      if(fkBoneAngle < 0.0001){
        // If the bone is already pointing directly at the target, we can't work with it.
        // in debug mode, report and error...
        continue;
      }
      
      Vec3 bendAxis = vecToIkGoal.cross(boneLengthVector);
      bendAxis.setUnit();
      Scalar ikBoneAngle;
      
      if (i == (basePose.size() - 3)) {
        // Use trigonometry to determine the ikBoneAngle
        // Law of cosines. a = BoneLength; b = Child BoneLength; c = Distance to the Ik Goal;
        ikBoneAngle = acos(Math_clamp((sq(boneLength) + sq(distToIkGoal) - sq(remainingChainLength)) / (2.0 * boneLength * distToIkGoal), - 1.0, 1.0));
      }
      else {
        Scalar maxFkBoneAngle, maxIkBoneAngle;

        // distance from the bone tip to the ik gloal
        if (distToFkChainTip > remainingChainLength) {
          // Using the law of cosines, calculate the maximum angle of this bone using the fk Chain tip
          maxFkBoneAngle = acos(Math_clamp((sq(boneLength) + sq(distToFkChainTip) - sq(remainingChainLength)) / (2.0 * boneLength * distToFkChainTip), - 1.0, 1.0));
        }
        else {
          // Add on the remaining chain length as radians.
          maxFkBoneAngle = acos(Math_clamp((boneLength * 0.5) / remainingChainLength, 0.0, 1.0));
          maxFkBoneAngle += (remainingChainLength - distToFkChainTip) / boneLength;
        }

        // distance from the bone tip to the ik gloal
        if (distToIkGoal > remainingChainLength) {
          // Using the law of cosines, calculate the maximum angle of this bone using the fk Chain tip
          maxIkBoneAngle = acos(Math_clamp((sq(boneLength) + sq(distToIkGoal) - sq(remainingChainLength)) / (2.0 * boneLength * distToIkGoal), - 1.0, 1.0));
        }
        else {
          // Add on the remaining chain length as radians.
          maxIkBoneAngle = acos(Math_clamp((boneLength * 0.5) / remainingChainLength, 0.0, 1.0));
          maxIkBoneAngle += (remainingChainLength - distToIkGoal) / boneLength;
        }

        ikBoneAngle = maxIkBoneAngle * (fkBoneAngle / maxFkBoneAngle);
      }

      // Subtract off the current angle the bone has with the vecToIkGoal to keep the delta
      Scalar deltaBoneAngle = (ikBoneAngle - fkBoneAngle);

      // Apply the rotation to the current bones
      Quat offset;
      offset.setFromAxisAndAngle(bendAxis, deltaBoneAngle);
      boneXfo.ori = offset * boneXfo.ori;
      
    }

    ikpose[boneIndex] = boneXfo;
  }
  ikpose[lastBoneIndex].tr = ikpose[lastBoneIndex-1].transformVector(boneVectors[lastBoneIndex-1]);
  return ikpose;
}



// Solve
function NBoneIKSolver.solve!
(
  Boolean debug,
  Scalar ikblend,
  Mat44 ikgoal,
  Mat44 fkcontrols[],
  Scalar tipBoneLen,
  io Mat44 pose[],
  io Mat44 legEnd
){
  if(fkcontrols.size != pose.size)
    throw("Error in NBoneIKSolver. The number of FKControls does not match the number of joints");

  Xfo xfoPose[];
  Vec3 boneVectors[];
  xfoPose.resize(fkcontrols.size+1);
  boneVectors.resize(fkcontrols.size);
  for(UInt32 i=0; i < fkcontrols.size; i++){
    xfoPose[i] = Xfo(fkcontrols[i]);
    if(i>0)
      boneVectors[i-1] = xfoPose[i-1].inverse().transformVector(xfoPose[i].tr);
  }
  boneVectors[boneVectors.size-1] = Vec3(tipBoneLen, 0.0, 0.0);
  xfoPose[fkcontrols.size] = xfoPose[fkcontrols.size-1];
  xfoPose[fkcontrols.size].tr = xfoPose[fkcontrols.size-1].transformVector(boneVectors[boneVectors.size-1]);
  
  if(ikblend > 0.0){
    Xfo ikPose[] = solveNCFIK(xfoPose, ikgoal.translation());

    // Now blend the IK result with the FK result
    for(UInt32 i=0; i < xfoPose.size; i++){
      xfoPose[i].ori = xfoPose[i].ori.sphericalLinearInterpolate(ikPose[i].ori, ikblend);
      if(i>0)
        xfoPose[i].tr = xfoPose[i-1].transformVector(boneVectors[i-1]);
    }
  }

  // Convert the Xfos back to Mat44s
  for(UInt32 i=0; i < pose.size; i++)
    pose[i] = xfoPose[i].toMat44();
  legEnd = xfoPose[xfoPose.size-1].toMat44();

  // Set debugging visibility.
  this.setDebug(debug);
  if(this.debug){

    Color boneColor(1.0, 1.0, 0);
    for(UInt32 i=0; i<pose.size; i++){
      Scalar boneLength = boneVectors[i].length();
      etDrawBone(this.handle.rootTransform, 'bone'+i, pose[i], boneLength, boneLength * 0.15, boneColor);
    }
  }
}
